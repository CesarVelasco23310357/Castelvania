@startuml Castelvania_Class_Diagram

!theme plain
title üè∞ CASTELVANIA - Diagrama de Clases UML (ACTUALIZADO - camelCase)

' Definir colores para diferentes tipos de clases
skinparam class {
    BackgroundColor<<Core>> LightBlue
    BackgroundColor<<Game>> LightGreen
    BackgroundColor<<Audio>> LightYellow
    BackgroundColor<<Physics>> LightCoral
    BackgroundColor<<Entity>> LightPink
    BackgroundColor<<Enum>> Wheat
}

' ================================
' CLASES PRINCIPALES (ACTUALIZADAS)
' ================================

class CGame <<Core>> {
    -window: sf::RenderWindow
    -gameState: GameState
    -player: unique_ptr<CPlayer>
    -levels: vector<unique_ptr<CLevel>>
    -physics: unique_ptr<CPhysics>
    -musica: unique_ptr<CMusica>
    -currentLevelIndex: int
    -totalScore: int
    -running: bool
    -fontLoaded: bool
    -inputCooldown: float
    --
    +run(): void
    +startNewGame(): void
    +loadLevel(int): void
    +handleInput(float): void
    +update(float): void
    +render(): void
}

class CPlayer <<Entity>> {
    -name: string
    -health: int
    -maxHealth: int
    -position: sf::Vector2f
    -speed: float
    -physics: CPhysics*
    -physicsBody: b2Body*
    -physicsEnabled: bool
    -grounded: bool
    -jumpForce: float
    -currentState: PlayerState
    -currentFrame: int
    -animationTimer: float
    -texturesLoaded: bool
    -hurt: bool
    -hurtTimer: float
    --
    +initializePhysics(CPhysics*): void
    +move(float, float): void
    +moveWithPhysics(float): void
    +jump(): void
    +attack(): void
    +takeDamage(int): void
    +update(float): void
    +render(sf::RenderWindow&): void
}

class CEnemy <<Entity>> {
    -type: string
    -enemyType: EnemyType
    -health: int
    -maxHealth: int
    -damage: int
    -position: sf::Vector2f
    -speed: float
    -physics: CPhysics*
    -physicsBody: b2Body*
    -physicsEnabled: bool
    -grounded: bool
    -flyCapable: bool
    -currentState: EnemyState
    -currentFrame: int
    -animationTimer: float
    -texturesLoaded: bool
    -moving: bool
    --
    +initializePhysics(CPhysics*): void
    +updateAI(sf::Vector2f, float): void
    +moveTowards(sf::Vector2f, float): void
    +moveWithPhysics(sf::Vector2f, float): void
    +attack(): int
    +takeDamage(int): void
    +jump(): void
    +fly(): void
    +update(float): void
    +render(sf::RenderWindow&): void
}

class CLevel <<Game>> {
    -levelNumber: int
    -levelName: string
    -state: LevelState
    -physics: CPhysics*
    -enemies: vector<unique_ptr<CEnemy>>
    -platforms: vector<PhysicalPlatform>
    -spawnPoints: vector<SpawnPoint>
    -levelSize: sf::Vector2f
    -boundaries: sf::FloatRect
    -levelTime: float
    -totalEnemies: int
    -enemiesKilled: int
    -texturesLoaded: bool
    -loaded: bool
    --
    +initializePhysics(CPhysics*): void
    +loadLevel(): void
    +unloadLevel(): void
    +addEnemy(EnemyType, float, float): void
    +addPhysicalPlatform(float, float, float, float): void
    +update(float, sf::Vector2f): void
    +render(sf::RenderWindow&): void
}

class CPhysics <<Physics>> {
    -world: unique_ptr<b2World>
    -bodies: unordered_map<void*, PhysicsBody>
    -contactListener: unique_ptr<PhysicsContactListener>
    --
    +createPlayerBody(float, float, void*): b2Body*
    +createEnemyBody(float, float, void*): b2Body*
    +createPlatform(float, float, float, float): b2Body*
    +createWall(float, float, float, float): b2Body*
    +update(float): void
    +applyForce(void*, float, float): void
    +applyImpulse(void*, float, float): void
    +isBodyOnGround(void*): bool
    +canJump(void*): bool
    +destroyBody(void*): void
}

class CMusica <<Audio>> {
    -menuMusic: sf::Music
    -gameplayMusic: sf::Music
    -currentMusicType: MusicType
    -audioState: AudioState
    -currentMusic: sf::Music*
    -masterVolume: float
    -musicVolume: float
    -muted: bool
    -fadeEnabled: bool
    -fadeTimer: float
    -fadeDuration: float
    -musicLoaded: bool
    --
    +initialize(): bool
    +playMenuMusic(): void
    +playGameplayMusic(): void
    +fadeToMenuMusic(float): void
    +fadeToGameplayMusic(float): void
    +setMasterVolumen(float): void
    +setMusicVolumen(float): void
    +toggleSilencio(): void
    +update(float): void
}

' ================================
' ESTRUCTURAS Y ENUMS (SIN CAMBIOS)
' ================================

enum GameState <<Enum>> {
    MENU
    PLAYING
    PAUSED
    LEVEL_COMPLETED
    GAME_OVER
    VICTORY
}

enum PlayerState <<Enum>> {
    IDLE
    RUNNING
    ATTACKING
    HURT
    JUMPING
    FALLING
}

enum EnemyType <<Enum>> {
    MURCIELAGO
    ESQUELETO
    ZOMBIE
}

enum EnemyState <<Enum>> {
    IDLE
    MOVING
}

enum LevelState <<Enum>> {
    LOADING
    ACTIVE
    COMPLETED
    FAILED
}

enum MusicType <<Enum>> {
    NONE
    MENU
    GAMEPLAY
}

enum AudioState <<Enum>> {
    STOPPED
    PLAYING
    PAUSED
    FADING_IN
    FADING_OUT
    TRANSITIONING
}

enum BodyType <<Enum>> {
    PLAYER
    ENEMY
    PLATFORM
    WALL
}

class PhysicalPlatform {
    +shape: sf::RectangleShape
    +floorSprite: sf::Sprite
    +physicsBody: b2Body*
    +position: sf::Vector2f
    +size: sf::Vector2f
    +color: sf::Color
    +hasTexture: bool
}

class SpawnPoint {
    +position: sf::Vector2f
    +enemyType: EnemyType
    +spawnTime: float
    +hasSpawned: bool
}

class PhysicsBody {
    +body: b2Body*
    +type: BodyType
    +userData: void*
}

class PhysicsContactListener {
    -groundContacts: unordered_map<void*, int>
    --
    +BeginContact(b2Contact*): void
    +EndContact(b2Contact*): void
    +isPlayerOnGround(void*): bool
    +updateGroundContacts(): void
}

' ================================
' RELACIONES USANDO S√çMBOLOS UML EST√ÅNDAR CORRECTOS
' ================================

' COMPOSICIONES (*--): La parte no puede existir sin el todo
CGame *-- "1" CPlayer : "posee"
CGame *-- "1" CPhysics : "posee"  
CGame *-- "1" CMusica : "posee"
CGame *-- "1..*" CLevel : "contiene"
CLevel *-- "0..*" CEnemy : "contiene"
CLevel *-- "0..*" PhysicalPlatform : "contiene"
CPhysics *-- "1" PhysicsContactListener : "contiene"
CPhysics *-- "0..*" PhysicsBody : "maneja"

' AGREGACIONES (o--): La parte puede existir independientemente
CLevel o-- "0..*" SpawnPoint : "tiene puntos de spawn"

' DEPENDENCIAS (-->): El objeto utiliza otro objeto
CPlayer --> "0..1" b2Body : "usa cuerpo f√≠sico"
CEnemy --> "0..1" b2Body : "usa cuerpo f√≠sico"
PhysicalPlatform --> "0..1" b2Body : "referencia"
CMusica --> "2" sf::Music : "maneja pistas"

' DEPENDENCIAS D√âBILES (..>): Uso temporal o indirecto
CGame ..> GameState : "usa"
CPlayer ..> CPhysics : "utiliza servicios"
CPlayer ..> PlayerState : "maneja estado"
CEnemy ..> CPhysics : "utiliza servicios"
CEnemy ..> EnemyType : "es de tipo"
CEnemy ..> EnemyState : "maneja estado"
CLevel ..> CPhysics : "utiliza servicios"
CLevel ..> LevelState : "maneja estado"
CMusica ..> MusicType : "reproduce tipo"
CMusica ..> AudioState : "maneja estado"
SpawnPoint ..> EnemyType : "spawea tipo"
PhysicsBody ..> BodyType : "es de tipo"

@enduml